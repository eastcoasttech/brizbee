@page "/dialogs/project"

@using Brizbee.Dashboard.Server.Services
@using Core.Models

@inject DialogService dialogService
@inject JobService projectService
@inject CustomerService customerService
@inject TaskTemplateService taskTemplateService

<EditForm Model="@project" OnValidSubmit="SaveProject" class="form-horizontal" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="project_number" class="col-sm-3 control-label">Number</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_number" @bind-Value="project.Number" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_name" class="col-sm-3 control-label">Name</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_name" @bind-Value="project.Name" @oninput="(EventArgs) => { RefreshQuickBooksCustomerJob(EventArgs.Value.ToString()); }" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_status" class="col-sm-3 control-label">Status</label>
        <div class="col-sm-9">
            <InputSelect id="project_status" class="form-control" disabled="@(working || loading)"
                         ValueChanged="@( (string x) => SelectedStatusValueChangeHandler(x) )"
                         ValueExpression="@( () => selectedStatus )"
                         Value="@selectedStatus">
                <option value="Proposed">Proposed</option>
                <option value="Open">Open</option>
                <option value="Needs Invoice">Needs Invoice</option>
                <option value="Merged">Merged</option>
                <option value="Closed">Closed</option>
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="project_description" class="col-sm-3 control-label">Description</label>
        <div class="col-sm-9">
            <InputTextArea class="form-control" id="project_description" @bind-Value="project.Description" disabled="@(working || loading)" />
        </div>
    </div>

    <hr />

    <div class="form-group">
        <label for="project_taxability" class="col-sm-3 control-label">Taxability</label>
        <div class="col-sm-9">
            <InputSelect id="project_taxability" class="form-control" disabled="@(working || loading)"
                         ValueChanged="@( (string x) => SelectedTaxabilityValueChangeHandler(x) )"
                         ValueExpression="@( () => selectedTaxability )"
                         Value="@selectedTaxability">
                <option value=""></option>
                <option value="None">None</option>
                <option value="Use Tax">Use Tax</option>
                <option value="Sales Tax">Sales Tax</option>
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="project_quote_number" class="col-sm-3 control-label">Quote Number</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_quote_number" @bind-Value="project.QuoteNumber" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_customer_work_order" class="col-sm-3 control-label">Customer <abbr title="Work Order">WO</abbr></label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_customer_work_order" @bind-Value="project.CustomerWorkOrder" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_customer_purchase_order" class="col-sm-3 control-label">Customer <abbr title="Purchase Order">PO</abbr></label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_customer_purchase_order" @bind-Value="project.CustomerPurchaseOrder" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_invoice_number" class="col-sm-3 control-label">Invoice Number</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_invoice_number" @bind-Value="project.InvoiceNumber" disabled="@(working || loading)" />
        </div>
    </div>

    <hr />

    <div class="form-group">
        <label for="project_quickbooks_customerjob" class="col-sm-3 control-label">QuickBooks Customer:Job</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_quickbooks_customerjob" @bind-Value="project.QuickBooksCustomerJob" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="project_quickbooks_class" class="col-sm-3 control-label">QuickBooks Class</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="project_quickbooks_class" @bind-Value="project.QuickBooksClass" disabled="@(working || loading)" />
        </div>
    </div>

    @if (project.Id == 0 && taskTemplates.Any())
    {
        <hr />

        <div class="form-group">
            <label for="project_task_template_id" class="col-sm-3 control-label">Task Template</label>
            <div class="col-sm-9">
                <InputSelect id="project_task_template_id" class="form-control" disabled="@(working || loading)"
                             ValueChanged="@( (int x) => SelectedTaskTemplateIdValueChangeHandler(x) )"
                             ValueExpression="@( () => selectedTaskTemplateId )"
                             Value="@selectedTaskTemplateId">
                    @foreach (var template in taskTemplates)
                    {
                        <option value="@template.Id">@template.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
    }

    <hr />

    @if (project.Id != 0)
    {
        <button class="btn btn-danger" type="button" @onclick="DeleteProject" disabled="@(working || loading)">Delete</button>
    }
    <i class="@((working || loading) ? "fa fa-spinner fa-spin fa-fw" : "hidden")"></i>
    <button class="btn btn-secondary pull-right" type="button" @onclick="CloseDialog" disabled="@(working)" style="margin-left: 2px;">Cancel</button>
    <button class="btn btn-primary pull-right" type="submit" disabled="@(working || loading)" style="margin-left: 2px;">OK</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    [Parameter] public int? CustomerId { get; set; }

    private bool working = false;
    private bool loading = true;
    private Job project = new Job();
    private Customer customer = new Customer();
    private string selectedStatus;
    private string selectedTaxability;
    private int selectedTaskTemplateId;
    private List<TaskTemplate> taskTemplates = new List<TaskTemplate>(0);

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Set the defaults.
        selectedStatus = "Open";
        SelectedStatusValueChangeHandler(selectedStatus);

        // --------------------------------------------------------------------
        // Load the parent customer.
        // --------------------------------------------------------------------

        customer = await customerService.GetCustomerByIdAsync(CustomerId.Value);

        // --------------------------------------------------------------------
        // Attempt to load the project, if necessary.
        // --------------------------------------------------------------------

        if (Id.HasValue)
        {
            project = await projectService.GetJobByIdAsync(Id.Value);

            // Set the status.
            selectedStatus = project.Status;
            SelectedStatusValueChangeHandler(selectedStatus);

            // Set the taxability.
            selectedTaxability = project.Taxability;
            SelectedTaxabilityValueChangeHandler(selectedTaxability);
        }
        else
        {
            project.Number = await projectService.GetNextNumberAsync();

            // Set the taxability.
            selectedTaxability = "";
            SelectedTaxabilityValueChangeHandler(selectedTaxability);

            await RefreshTaskTemplates();

            // Select the default task template if there are any.
            if (taskTemplates.Any())
                SelectedTaskTemplateIdValueChangeHandler(taskTemplates.FirstOrDefault().Id);
        }

        loading = false;
    }

    private async System.Threading.Tasks.Task SaveProject()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to save this project?",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        working = true;
        StateHasChanged();

        // Set the cutomer id.
        project.CustomerId = CustomerId.Value;

        // Save the project on the server and close the dialog.
        await projectService.SaveJobAsync(project);
        dialogService.Close("project.created");
    }

    private async System.Threading.Tasks.Task DeleteProject()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to delete this project?",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        working = true;
        StateHasChanged();

        // Delete the project on the server and close the dialog.
        var result = await projectService.DeleteJobAsync(project.Id);
        if (result)
            dialogService.Close("project.deleted");
        else
            working = false;
    }

    private async System.Threading.Tasks.Task RefreshTaskTemplates()
    {
        // Refresh the list of task templates.
        var result = await taskTemplateService.GetTaskTemplatesAsync();

        taskTemplates = result.Item1;
    }

    private void CloseDialog(MouseEventArgs e)
    {
        dialogService.Close(false);
    }

    private void SelectedStatusValueChangeHandler(string status)
    {
        selectedStatus = status;

        // Update the project.
        project.Status = selectedStatus;
    }

    private void SelectedTaxabilityValueChangeHandler(string taxability)
    {
        selectedTaxability = taxability;

        // Update the project.
        project.Taxability = selectedTaxability;
    }

    private void SelectedTaskTemplateIdValueChangeHandler(int taskTemplateId)
    {
        selectedTaskTemplateId = taskTemplateId;

        // Update the project.
        project.TaskTemplateId = selectedTaskTemplateId;
    }

    private void RefreshQuickBooksCustomerJob(string name)
    {
        if (Id.HasValue)
            return;

        project.QuickBooksCustomerJob = $"{customer.Name}:{project.Number} - {name}";
    }
}
