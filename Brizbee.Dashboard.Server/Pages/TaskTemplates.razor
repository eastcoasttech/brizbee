@page "/task-templates"

@using System.Text.Json 
@using Brizbee.Dashboard.Server.Services
@using Core.Models

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@inject SharedService sharedService
@inject UserService userService
@inject OrganizationService organizationService
@inject TaskTemplateService taskTemplateService
@inject DialogService dialogService
@inject IJSRuntime JSRuntime

@implements IDisposable

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <NavLink class="navbar-brand" href="kiosk/status">
                <img alt="BRIZBEE Logo" src="/icon-32x32.png">
            </NavLink>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <NavLink class="nav-link" href="kiosk/status">
                        <i class="far fa-id-badge fa-padded" aria-hidden="true"></i> Kiosk
                    </NavLink>
                </li>
                @if (currentUser.CanViewPunches || currentUser.CanViewTimecards || currentUser.CanViewRates || currentUser.CanViewLocks)
                {
                    <li>
                        <NavLink class="nav-link" href="punches">
                            <i class="far fa-clock fa-padded" aria-hidden="true"></i> Time
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewCustomers || currentUser.CanViewProjects || currentUser.CanViewTasks)
                {
                    <li>
                        <NavLink class="nav-link" href="customers">
                            <i class="fas fa-truck fa-padded" aria-hidden="true"></i> Projects and Customers
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewInventoryConsumptions || currentUser.CanViewInventoryItems)
                {
                    <li>
                        <NavLink class="nav-link" href="inventory/consumption">
                            <i class="fas fa-boxes fa-padded" aria-hidden="true"></i> Inventory
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewReports)
                {
                    <li>
                        <NavLink class="nav-link" href="reports">
                            <i class="fas fa-chart-line fa-padded" aria-hidden="true"></i> Reports
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewUsers)
                {
                    <li>
                        <NavLink class="nav-link" href="users">
                            <i class="fas fa-users fa-padded" aria-hidden="true"></i> Users
                        </NavLink>
                    </li>
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="navbar-phone"><a href="tel:1-888-930-3044">Punch In or Out @@ 1-888-930-3044</a></li>
                <li class="dropdown">
                    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>
                            <NavLink class="nav-link" href="user-details">
                                Account Details
                            </NavLink>
                        </li>
                        @if (currentUser.CanViewOrganizationDetails)
                        {
                            <li role="separator" class="divider"></li>
                            <li>
                                <NavLink class="nav-link" href="organization-details">
                                    Organization Settings
                                </NavLink>
                            </li>
                        }
                        <li role="separator" class="divider"></li>
                        <li><a href="javascript:void(0)" @onclick="SignOutClicked">Sign Out</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container-fluid fadeIn">
    <div class="row">
        <div class="col-md-6 col-md-offset-3 col-sm-12">
            <ul class="nav nav-pills">
                <li role="presentation"><NavLink href="organization-details">Organization Details</NavLink></li>
                <li role="presentation"><NavLink href="billing-details">Billing Details</NavLink></li>
                <li role="presentation" class="active"><NavLink href="task-templates">Task Templates</NavLink></li>
                <li role="presentation"><NavLink href="organization-preferences">Organization Preferences</NavLink></li>
            </ul>

            <hr />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-md-offset-3 col-sm-12">

            @if (working)
            {
                <p class="fadeIn" style="font-size: 2rem;"><i class="fa fa-spinner fa-spin fa-fw"></i></p>
            }

            @foreach (var template in taskTemplates)
            {
                <div class="card">
                    <div class="card-header"><i class="fas fa-stream" style="margin-right: 5px;"></i> @template.Name Template</div>
                    <div class="card-body">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th class="col-sm-3">Task Name</th>
                                    <th class="col-sm-3">Bar Code Group</th>
                                    <th class="col-sm-3">Base Payroll Rate</th>
                                    <th class="col-sm-3">Base Service Rate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in templateItems[template.Id])
                                {
                                    <tr>
                                        <td>@item.Name</td>
                                        <td>@item.Group</td>
                                        <td>@item.BasePayrollRate</td>
                                        <td>@item.BaseServiceRate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button class="btn btn-secondary" @onclick="@(e => OpenModifyTaskTemplateDialog(template))">Edit Template</button>
                    </div>
                </div>
            }

            <button class="btn btn-secondary btn-lg" @onclick="@(e => OpenNewTaskTemplateDialog())"><i class="fa fa-plus" style="margin-right: 5px;"></i> Add New Template</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback SignOutClicked { get; set; }

    private bool working = false;
    private User currentUser;
    private Organization organization = new Organization();
    private List<TaskTemplate> taskTemplates = new List<TaskTemplate>(0);
    private Dictionary<int, List<TemplateItem>> templateItems = new Dictionary<int, List<TemplateItem>>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Subscribe to the events
        sharedService.OnChange += StateHasChanged;

        currentUser = sharedService.CurrentUser;

        organization = await organizationService.GetOrganizationByIdAsync(currentUser.OrganizationId);

        await RefreshTaskTemplates();

        dialogService.OnClose += Close;
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe to the events
        sharedService.OnChange -= StateHasChanged;

        dialogService.OnClose -= Close;
    }

    private async System.Threading.Tasks.Task RefreshTaskTemplates()
    {
        working = true;
        StateHasChanged();

        // Refresh the list of task templates.
        var result = await taskTemplateService.GetTaskTemplatesAsync();

        foreach (var template in result.Item1)
        {
            var items = JsonSerializer.Deserialize<List<TemplateItem>>(template.Template);

            templateItems[template.Id] = items;
        }

        taskTemplates = result.Item1;

        working = false;
        StateHasChanged();
    }

    private async void Close(dynamic result)
    {
        await RefreshTaskTemplates();

        StateHasChanged();
    }

    private void OpenNewTaskTemplateDialog()
    {
        dialogService.Open<TaskTemplateDialog>("New Task Template",
                                new Dictionary<string, object>() { { "Id", null } },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenModifyTaskTemplateDialog(TaskTemplate template)
    {
        dialogService.Open<TaskTemplateDialog>("Edit Task Template",
                                new Dictionary<string, object>() { { "Id", template.Id } },
                                new DialogOptions() { Width = "600px" });
    }

    public class TemplateItem
    {
        public string Name { get; set; }

        public string Group { get; set; }

        public string BasePayrollRate { get; set; }

        public string BaseServiceRate { get; set; }
    }
}