@page "/rates"

@using Brizbee.Core.Models
@using Brizbee.Dashboard.Server.Services

@inject NavigationManager NavigationManager
@inject SharedService sharedService
@inject UserService userService
@inject PunchService punchService
@inject RateService rateService
@inject DialogService dialogService

@implements IDisposable

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <NavLink class="navbar-brand" href="kiosk/status">
                <img alt="BRIZBEE Logo" src="/icon-32x32.png">
            </NavLink>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <NavLink class="nav-link" href="kiosk/status">
                        <i class="far fa-id-badge fa-padded" aria-hidden="true"></i> Kiosk
                    </NavLink>
                </li>
                @if (currentUser.CanViewPunches || currentUser.CanViewTimecards || currentUser.CanViewRates || currentUser.CanViewLocks)
                {
                    <li class="active">
                        <NavLink class="nav-link" href="punches">
                            <i class="far fa-clock fa-padded" aria-hidden="true"></i> Time <span class="sr-only">(current)</span>
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewCustomers || currentUser.CanViewProjects || currentUser.CanViewTasks)
                {
                    <li>
                        <NavLink class="nav-link" href="customers">
                            <i class="fas fa-truck fa-padded" aria-hidden="true"></i> Projects and Customers
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewInventoryConsumptions || currentUser.CanViewInventoryItems)
                {
                    <li>
                        <NavLink class="nav-link" href="inventory/consumption">
                            <i class="fas fa-boxes fa-padded" aria-hidden="true"></i> Inventory
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewReports)
                {
                    <li>
                        <NavLink class="nav-link" href="reports">
                            <i class="fas fa-chart-line fa-padded" aria-hidden="true"></i> Reports
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewUsers)
                {
                    <li>
                        <NavLink class="nav-link" href="users">
                            <i class="fas fa-users fa-padded" aria-hidden="true"></i> Users
                        </NavLink>
                    </li>
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="navbar-phone"><a href="tel:1-888-930-3044">Punch In or Out @@ 1-888-930-3044</a></li>
                <li class="dropdown">
                    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>
                            <NavLink class="nav-link" href="user-details">
                                Account Details
                            </NavLink>
                        </li>
                        @if (currentUser.CanViewOrganizationDetails)
                        {
                            <li role="separator" class="divider"></li>
                            <li>
                                <NavLink class="nav-link" href="organization-details">
                                    Organization Settings
                                </NavLink>
                            </li>
                        }
                        <li role="separator" class="divider"></li>
                        <li><a href="javascript:void(0)" @onclick="SignOutClicked">Sign Out</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container-fluid fadeIn">
    <ul class="nav nav-pills">
        <li role="presentation"><NavLink href="punches">Punches</NavLink></li>
        <li role="presentation"><NavLink href="timecards">Time Cards</NavLink></li>
        <li role="presentation"><NavLink href="locks">Locks</NavLink></li>
        <li role="presentation"><NavLink href="exports">Export History</NavLink></li>
        <li role="presentation" class="active"><NavLink href="rates">Rates</NavLink></li>
    </ul>

    <hr />

    <!--Toolbar-->
    <div class="row row-toolbar">
        <div class="col-md-6">
            <div class="btn-toolbar" role="toolbar">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenNewRateDialog())"><i class="fa fa-plus" aria-hidden="true" style="margin-right: 5px;"></i> New Rate</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => RefreshRates())"><i class="fas fa-sync-alt" aria-hidden="true"></i></button>
                </div>
            </div>
        </div>
    </div>

    <!--List of Rates-->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Base</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rate in rates)
            {
                <tr class="fadeIn selectable" @onclick="@(e => OpenModifyRateDialog(rate))">
                    <td><a href="javascript:void(0)">@rate.Name</a></td>
                    <td>
                        @if (rate.Type == "Payroll")
                        {
                            <span><i class="fas fa-money-bill" aria-hidden="true" style="margin-right: 5px;"></i> Payroll</span>
                        }
                        else if (rate.Type == "Service")
                        {
                            <span><i class="fas fa-handshake" aria-hidden="true" style="margin-right: 5px;"></i> Customer</span>
                        }
                    </td>
                    <td><span>@(rate.ParentRateId.HasValue ? rate.ParentRate.Name : "")</span></td>
                </tr>
            }
            @if (working)
            {
                <tr class="fadeIn">
                    <td colspan="3"><i class="fa fa-spinner fa-spin fa-fw"></i></td>
                </tr>
            }
            @if (!working && rates.Count == 0)
            {
                <tr class="fadeIn">
                    <td colspan="3">You haven't added any rates</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col-md-6">
            @if (ratesCount > pageSize)
            {
                <div class="pull-left" style="margin-right: 1rem;">
                    <button class="btn btn-sm btn-default pull-left" @onclick="PreviousPage"><i class="fa fa-arrow-left" aria-hidden="true"></i></button>
                    <button class="btn btn-sm btn-default pull-left" @onclick="NextPage"><i class="fa fa-arrow-right" aria-hidden="true"></i></button>
                </div>
            }

            @if (ratesCount > 0 && !working)
            {
                <p class="form-control-static pull-left">@(ratesPageStart + 1) to @(ratesPageStart + pageSize < ratesCount ? ratesPageStart + pageSize : ratesCount) of @ratesCount</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback SignOutClicked { get; set; }

    private bool working = false;
    private User? currentUser;
    private List<Rate> rates = new List<Rate>();
    private string sortBy = "Type,Name";
    private string sortDirection = "ASC";
    private int pageSize = 100;
    private int skip = 0;
    private long ratesCount = 0;
    private int ratesPageStart = 0;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Subscribe to the events
        sharedService.OnChange += StateHasChanged;

        currentUser = sharedService.CurrentUser;

        await RefreshRates();

        dialogService.OnClose += Close;
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe to the events
        sharedService.OnChange -= StateHasChanged;

        dialogService.OnClose -= Close;
    }

    private async void NextPage(MouseEventArgs e)
    {
        ratesPageStart = ratesPageStart + pageSize;
        skip = ratesPageStart;
        await RefreshRates();
    }

    private async void PreviousPage(MouseEventArgs e)
    {
        ratesPageStart = ratesPageStart - pageSize;
        skip = ratesPageStart;
        await RefreshRates();
    }

    private async void Close(dynamic result)
    {
        await RefreshRates();
    }

    private async System.Threading.Tasks.Task RefreshRates()
    {
        working = true;
        rates.Clear();
        var result = await rateService.GetRatesAsync(pageSize, skip, sortBy, sortDirection);
        rates = result.Item1;
        ratesCount = result.Item2.GetValueOrDefault();
        working = false;
        StateHasChanged();
    }

    private void OpenNewRateDialog()
    {
        dialogService.Open<RateDialog>("New Rate",
                                new Dictionary<string, object>() { { "Id", null } },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenModifyRateDialog(Rate rate)
    {
        dialogService.Open<RateDialog>("Edit Rate",
                                new Dictionary<string, object>() { { "Id", rate.Id } },
                                new DialogOptions() { Width = "600px" });
    }

    private async void ChangeSortBy(string column)
    {
        sortBy = column;

        if (sortDirection == "ASC")
        {
            sortDirection = "DESC";
        }
        else
        {
            sortDirection = "ASC";
        }

        await RefreshRates();
    }
}