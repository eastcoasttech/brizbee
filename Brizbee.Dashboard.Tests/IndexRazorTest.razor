@using Microsoft.VisualStudio.TestTools.UnitTesting
@using Microsoft.Extensions.DependencyInjection
@using Brizbee.Common.Security
@using Brizbee.Common.Models
@using Brizbee.Dashboard.Services
@using Radzen
@using RichardSzalay.MockHttp

@attribute [TestClass]
@code
{
    [TestMethod]
    public void IndexComponentRendersCorrectly()
    {
        // Arrange
        using var ctx = new Bunit.TestContext();
        ctx.JSInterop.Mode = JSRuntimeMode.Loose;

        // Prepare mock client.
        var mock = ctx.Services.AddMockHttpClient();
        mock.When("/odata/Users/Default.Authenticate").RespondJson(new Credential() { AuthExpiration = "0", AuthToken = "0", AuthUserId = "1" });
        mock.When("/odata/Users(1)?$expand=Organization").RespondJson(new User() { Id = 1, EmailAddress = "user@brizbee.com", Name = "BRIZBEE User" });

        // Configure additional services.
        ctx.Services.AddSingleton<ApiService>();
        ctx.Services.AddSingleton<AuditService>();
        ctx.Services.AddSingleton<KioskService>();
        ctx.Services.AddSingleton<ExportService>();
        ctx.Services.AddSingleton<TimesheetEntryService>();
        ctx.Services.AddSingleton<CommitService>();
        ctx.Services.AddSingleton<PunchService>();
        ctx.Services.AddSingleton<UserService>();
        ctx.Services.AddSingleton<CustomerService>();
        ctx.Services.AddSingleton<TaskService>();
        ctx.Services.AddSingleton<TaskTemplateService>();
        ctx.Services.AddSingleton<PopulateTemplateService>();
        ctx.Services.AddSingleton<JobService>();
        ctx.Services.AddSingleton<RateService>();
        ctx.Services.AddSingleton<OrganizationService>();
        ctx.Services.AddSingleton<TimesheetEntryService>();
        ctx.Services.AddSingleton<QBDInventoryItemService>();
        ctx.Services.AddSingleton<QBDInventoryItemSyncService>();
        ctx.Services.AddSingleton<QBDInventoryConsumptionService>();
        ctx.Services.AddSingleton<QBDInventoryConsumptionSyncService>();
        ctx.Services.AddSingleton<SharedService>();
        ctx.Services.AddSingleton<GeolocationService>();

        ctx.Services.AddScoped<LocalStorageService>();

        ctx.Services.AddScoped<DialogService>();
        ctx.Services.AddScoped<NotificationService>();
        ctx.Services.AddScoped<TooltipService>();
        ctx.Services.AddScoped<ContextMenuService>();

        // Act
        var cut = ctx.Render(@<Brizbee.Dashboard.Pages.Index />);

        cut.Find("#inputOrganizationCode").Change("1234");
        cut.Find("#inputUserPin").Change("0000");
        cut.Find("#formPin").Submit();

        // Assert
        Assert.IsTrue(cut.Find("#inputOrganizationCode").HasAttribute("disabled"));
        Assert.IsTrue(cut.Find("#inputUserPin").HasAttribute("disabled"));
    }
}
