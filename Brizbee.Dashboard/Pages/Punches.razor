@page "/punches"

@using Brizbee.Dashboard.Services
@using Brizbee.Dashboard.Serialization
@using Brizbee.Common.Security
@using Brizbee.Common.Models

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@inject SharedService sharedService
@inject UserService userService
@inject PunchService punchService
@inject DialogService dialogService

@implements IDisposable

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#!/status">
                <img alt="BRIZBEE Logo" src="/icon-32x32.png" style="height: 22px;">
            </a>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <NavLink class="nav-link" href="status">
                        <i class="far fa-id-badge fa-padded" aria-hidden="true"></i> Status
                    </NavLink>
                </li>
                @if (currentUser.Role == "Administrator")
                {
                    <li class="active">
                        <NavLink class="nav-link" href="punches">
                            <i class="far fa-clock fa-padded" aria-hidden="true"></i> Time <span class="sr-only">(current)</span>
                        </NavLink>
                    </li>
                    <li><a href="#!/jobs"><i class="fas fa-truck fa-padded" aria-hidden="true"></i> Jobs and Customers</a></li>
                    <li><a href="#!/reports"><i class="fas fa-chart-line fa-padded" aria-hidden="true"></i> Reports</a></li>
                    <li><a href="#!/users"><i class="fas fa-users fa-padded" aria-hidden="true"></i> Users</a></li>
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="navbar-phone"><a href="tel:1-888-930-3044">Punch In or Out @@ 1-888-930-3044</a></li>
                <li class="dropdown">
                    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li><a href="#!/my/user">Account Details</a></li>
                        @if (currentUser.Role == "Administrator")
                        {
                            <li><a href="#!/my/organization">Organization Details</a></li>
                        }
                        <li role="separator" class="divider"></li>
                        <li><a href="" @onclick="SignOutAsync">Sign Out</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container-fluid">
    <ul class="nav nav-pills">
        <li role="presentation" class="active"><a href="#!/punches">Punches</a></li>
        <li role="presentation"><a href="#!/timesheets">Time Cards</a></li>
        <li role="presentation"><a href="#!/commits">Locks</a></li>
        <li role="presentation"><a href="#!/qbd-exports">Export History</a></li>
        <li role="presentation"><a href="#!/rates">Rates</a></li>
    </ul>

    <hr />

    <!--Toolbar-->
    <div class="row row-toolbar">
        <div class="col-md-6">
            <div class="btn-toolbar" role="toolbar">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenNewPunchDialog())"><i class="fa fa-plus" aria-hidden="true" style="margin-right: 5px;"></i> New Punch</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenSplitDialog())" disabled="@(working || punches.Count == 0)">Split</button>
                    <button type="button" class="btn btn-default" ng-click="showPopulateRates()" disabled="@(working || punches.Count == 0)">Populate Rates</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenLockDialog())" disabled="@(working || punches.Count == 0)"><i class="fa fa-lock" aria-hidden="true" style="margin-right: 5px;"></i> Lock</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenDownloadDialog())" disabled="@(working || punches.Count == 0)"><i class="fas fa-file-csv" aria-hidden="true" style="margin-right: 5px;"></i> Download</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => RefreshPunches())"><i class="fas fa-sync-alt" aria-hidden="true"></i></button>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="btn-toolbar pull-right" role="toolbar">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenRangeDialog())"><i class="far fa-calendar-alt" aria-hidden="true" style="margin-right: 5px;"></i> @sharedService.RangeMin.ToString("yyyy-MM-dd") <small>thru</small> @sharedService.RangeMax.ToString("yyyy-MM-dd")</button>
                </div>
            </div>
        </div>
    </div>

    <!--List of Punches-->
    <table class="table table-bordered table-condensed table-supercondensed">
        <thead>
            <tr>
                <th style="width: 15%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("User/Name"))">
                        User
                        @if (sortBy == "User/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "User/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 10%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("InAt"))">
                        In
                        @if (sortBy == "InAt" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "InAt" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 10%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("OutAt"))">
                        Out
                        @if (sortBy == "OutAt" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "OutAt" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 15%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("Task/Job/Customer/Name"))">
                        Customer
                        @if (sortBy == "Task/Job/Customer/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "Task/Job/Customer/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 15%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("Task/Job/Name"))">
                        Job
                        @if (sortBy == "Task/Job/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "Task/Job/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 10%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("Task/Name"))">
                        Task
                        @if (sortBy == "Task/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "Task/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 10%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("PayrollRate/Name"))">
                        Payroll Rate
                        @if (sortBy == "PayrollRate/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "PayrollRate/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 10%;">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("ServiceRate/Name"))">
                        Customer Rate
                        @if (sortBy == "ServiceRate/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "ServiceRate/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th style="width: 5%;">
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var punch in punches)
            {
                <tr class="selectable @(punch.OutAt.HasValue ? "" : "warning") @(punch.OutAt.HasValue && punch.OutAt.Value > sharedService.RangeMax ? "danger" : "")" @onclick="@(e => OpenModifyPunchDialog(punch))">
                    <td><a href="javascript:void(0)">@punch.User.Name</a></td>
                    <td><a href="javascript:void(0)">@punch.InAt.ToString("yyyy-MM-dd h:mm tt")</a></td>
                    <td>
                        @if (punch.OutAt.HasValue)
                        {
                            <a href="javascript:void(0)">@punch.OutAt.Value.ToString("yyyy-MM-dd h:mm tt")</a>
                        }
                        else
                        {
                            <span>STILL WORKING</span>
                        }
                    </td>
                    <td><a href="javascript:void(0)">@punch.Task.Job.Customer.Number &ndash; @punch.Task.Job.Customer.Name</a></td>
                    <td><a href="javascript:void(0)">@punch.Task.Job.Number &ndash; @punch.Task.Job.Name</a></td>
                    <td><a href="javascript:void(0)">@punch.Task.Number &ndash; @punch.Task.Name</a></td>
                    <td>
                        @if (punch.PayrollRate != null)
                        {
                            <a href="javascript:void(0)">@punch.PayrollRate.Name</a>
                        }
                    </td>
                    <td>
                        @if (punch.ServiceRate != null)
                        {
                            <a href="javascript:void(0)">@punch.ServiceRate.Name</a>
                        }
                    </td>
                    <td class="text-center">
                        @if (punch.CommitId.HasValue)
                        {
                            <i class="fa fa-lock" aria-hidden="true"></i>
                        }
                    </td>
                </tr>
            }
            @if (working)
            {
                <tr>
                    <td colspan="9"><i class="fa fa-spinner fa-spin fa-fw"></i></td>
                </tr>
            }
            @if (!working && punches.Count == 0)
            {
                <tr>
                    <td colspan="9">No Punches for the Selected Date Range</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col-md-6">
            @if (punchesCount > pageSize)
            {
                <div class="pull-left" style="margin-right: 1rem;">
                    <button class="btn btn-sm btn-default pull-left" @onclick="PreviousPage"><i class="fa fa-arrow-left" aria-hidden="true"></i></button>
                    <button class="btn btn-sm btn-default pull-left" @onclick="NextPage"><i class="fa fa-arrow-right" aria-hidden="true"></i></button>
                </div>
            }

            @if (punchesCount > 0 && !working)
            {
                <p class="form-control-static pull-left">@(punchesPageStart + 1) to @(punchesPageStart + pageSize < punchesCount ? punchesPageStart + pageSize : punchesCount) of @punchesCount</p>
            }
        </div>
        <div class="col-md-6 text-right">
            <p class="form-control-static">
                @hoursAndMinutes
            </p>
        </div>
    </div>
</div>

@code {
    private bool working = false;
    private User currentUser;
    private Punch currentPunch;
    private List<Punch> punches = new List<Punch>();
    private string sortBy = "InAt";
    private string sortDirection = "ASC";
    private int pageSize = 100;
    private int skip = 0;
    private long punchesCount = 0;
    private int punchesPageStart = 0;
    private string hoursAndMinutes = "0 hours and 0 minutes";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Subscribe to the events
        sharedService.OnChange += StateHasChanged;

        currentUser = sharedService.CurrentUser;

        await RefreshPunches();

        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // Unsubscribe to the events
        sharedService.OnChange -= StateHasChanged;
    }

    private async void NextPage(MouseEventArgs e)
    {
        punchesPageStart = punchesPageStart + pageSize;
        skip = punchesPageStart;//pageSize * punchesPageStart;
        await RefreshPunches();
    }

    private async void PreviousPage(MouseEventArgs e)
    {
        punchesPageStart = punchesPageStart - pageSize;
        skip = punchesPageStart;//pageSize * punchesPageStart;
        await RefreshPunches();
    }

    private async void SignOutAsync(MouseEventArgs e)
    {
        // Clear the local storage
        await localStorageService.RemoveFromLocalStorage("AuthUserId");
        await localStorageService.RemoveFromLocalStorage("AuthToken");
        await localStorageService.RemoveFromLocalStorage("AuthExpiration");

        userService.ResetHeaders();
        punchService.ResetHeaders();
        sharedService.Reset();
        NavigationManager.NavigateTo("/");
    }

    private void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    private async void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed with result: {result}");
        await RefreshPunches();
    }

    private async System.Threading.Tasks.Task RefreshPunches()
    {
        working = true;
        punches.Clear();
        var result = await punchService.GetPunchesAsync(sharedService.RangeMin, new DateTime(sharedService.RangeMax.Year, sharedService.RangeMax.Month, sharedService.RangeMax.Day, 23, 59, 59), pageSize, skip, sortBy, sortDirection);
        punches = result.Item1;
        punchesCount = result.Item2.GetValueOrDefault();
        RefreshHoursAndMinutes();
        working = false;
        StateHasChanged();
    }

    private void RefreshHoursAndMinutes()
    {
        double minutes = 0;
        foreach (var punch in punches.Where(p => p.OutAt.HasValue))
        {
            var span = punch.OutAt.Value - punch.InAt;
            minutes += span.TotalMinutes;
        }
        string quotient = Math.Floor(minutes / 60).ToString("N0");
        double remainder = minutes % 60;
        hoursAndMinutes = $"{quotient} hours and {remainder} minutes";
    }

    private void OpenNewPunchDialog()
    {
        dialogService.Open<PunchDialog>("New Punch",
                                new Dictionary<string, object>() { { "Id", null } },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenModifyPunchDialog(Punch punch)
    {
        dialogService.Open<PunchDialog>("Edit Punch",
                                new Dictionary<string, object>() { { "Id", punch.Id } },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenDownloadDialog()
    {
        dialogService.Open<DownloadDialog>("Download Punches",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenSplitDialog()
    {
        dialogService.Open<SplitDialog>("Split Punches at Midnight",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenLockDialog()
    {
        dialogService.Open<LockDialog>("Lock Punches",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenRangeDialog()
    {
        dialogService.Open<RangeDialog>("Change Date Range",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private async void ChangeSortBy(string column)
    {
        sortBy = column;

        if (sortDirection == "ASC")
        {
            sortDirection = "DESC";
        }
        else
        {
            sortDirection = "ASC";
        }

        await RefreshPunches();
    }
}