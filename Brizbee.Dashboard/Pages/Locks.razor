@page "/locks"

@using Brizbee.Dashboard.Services
@using Brizbee.Common.Models

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@inject SharedService sharedService
@inject UserService userService
@inject CommitService commitService
@inject PunchService punchService
@inject DialogService dialogService

@implements IDisposable

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#!/status">
                <img alt="BRIZBEE Logo" src="/icon-32x32.png" style="height: 22px;">
            </a>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <NavLink class="nav-link" href="status">
                        <i class="far fa-id-badge fa-padded" aria-hidden="true"></i> Status
                    </NavLink>
                </li>
                @if (currentUser.Role == "Administrator")
                {
                    <li class="active">
                        <NavLink class="nav-link" href="punches">
                            <i class="far fa-clock fa-padded" aria-hidden="true"></i> Time <span class="sr-only">(current)</span>
                        </NavLink>
                    </li>
                    <li>
                        <NavLink class="nav-link" href="customers">
                            <i class="fas fa-truck fa-padded" aria-hidden="true"></i> Projects and Customers
                        </NavLink>
                    </li>
                    <li><a href="#!/reports"><i class="fas fa-chart-line fa-padded" aria-hidden="true"></i> Reports</a></li>
                    <li><a href="#!/users"><i class="fas fa-users fa-padded" aria-hidden="true"></i> Users</a></li>
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="navbar-phone"><a href="tel:1-888-930-3044">Punch In or Out @@ 1-888-930-3044</a></li>
                <li class="dropdown">
                    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li><a href="javascript:void(0)">Account Details</a></li>
                        @if (currentUser.Role == "Administrator")
                        {
                            <li><a href="javascript:void(0)">Organization Details</a></li>
                        }
                        <li role="separator" class="divider"></li>
                        <li><a href="javascript:void(0)" @onclick="SignOutClicked">Sign Out</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container-fluid">
    <ul class="nav nav-pills">
        <li role="presentation"><NavLink href="punches">Punches</NavLink></li>
        <li role="presentation"><NavLink href="timecards">Time Cards</NavLink></li>
        <li role="presentation" class="active"><NavLink href="locks">Locks</NavLink></li>
        <li role="presentation"><NavLink href="exports">Export History</NavLink></li>
        <li role="presentation"><NavLink href="rates">Rates</NavLink></li>
    </ul>

    <hr />

    <!--Toolbar-->
    <div class="row row-toolbar">
        <div class="col-md-6">
            <div class="btn-toolbar" role="toolbar">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => OpenLockDialog())" disabled="@(working)"><i class="fa fa-lock" aria-hidden="true" style="margin-right: 5px;"></i> Lock Punches</button>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default" @onclick="@(e => RefreshLocks())"><i class="fas fa-sync-alt" aria-hidden="true"></i></button>
                </div>
            </div>
        </div>
        <div class="col-md-6">
        </div>
    </div>

    <!--List of Commits-->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-md-1">
                    Id
                </th>
                <th class="col-md-2">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("InAt"))">
                        From
                        @if (sortBy == "InAt" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "InAt" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th class="col-md-2">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("OutAt"))">
                        To
                        @if (sortBy == "OutAt" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "OutAt" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th class="col-md-1">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("PunchCount"))">
                        Punches
                        @if (sortBy == "PunchCount" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "PunchCount" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th class="col-md-2">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("CreatedAt"))">
                        Locked
                        @if (sortBy == "CreatedAt" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "CreatedAt" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th class="col-md-3">
                    <a href="javascript:void(0)" @onclick="@(e => ChangeSortBy("User/Name"))">
                        User
                        @if (sortBy == "User/Name" && sortDirection == "ASC")
                        {
                            <span class="fa fa-caret-up"></span>
                        }
                        else if (sortBy == "User/Name" && sortDirection == "DESC")
                        {
                            <span class="fa fa-caret-down"></span>
                        }
                    </a>
                </th>
                <th class="col-md-1"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lok in locks)
            {
                <tr class="fadeIn">
                    <td>@lok.Id</td>
                    <td>@lok.InAt.ToShortDateString()</td>
                    <td>@lok.OutAt.ToShortDateString()</td>
                    <td>@lok.PunchCount</td>
                    <td>@lok.CreatedAt.ToString("M/d/yyyy h:mm tt")</td>
                    <td>@lok.User.Name</td>
                    <td class="text-center"><a href="javascript:void(0)" @onclick="@(e => Undo(lok.Id))"><i class="fa fa-undo" aria-hidden="true"></i> Undo</a></td>
                </tr>
            }
            @if (working)
            {
                <tr class="fadeIn">
                    <td colspan="7"><i class="fa fa-spinner fa-spin fa-fw"></i></td>
                </tr>
            }
            @if (!working && locks.Count == 0)
            {
                <tr class="fadeIn">
                    <td colspan="7">You Have Not Locked Any Punches Yet</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col-md-6">
            @if (locksCount > pageSize)
            {
                <div class="pull-left" style="margin-right: 1rem;">
                    <button class="btn btn-sm btn-default pull-left" @onclick="PreviousPage"><i class="fa fa-arrow-left" aria-hidden="true"></i></button>
                    <button class="btn btn-sm btn-default pull-left" @onclick="NextPage"><i class="fa fa-arrow-right" aria-hidden="true"></i></button>
                </div>
            }

            @if (locksCount > 0 && !working)
            {
                <p class="form-control-static pull-left">@(locksPageStart + 1) to @(locksPageStart + pageSize < locksCount ? locksPageStart + pageSize : locksCount) of @locksCount</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback SignOutClicked { get; set; }

    private bool working = false;
    private User currentUser;
    private List<Commit> locks = new List<Commit>();
    private string sortBy = "InAt";
    private string sortDirection = "ASC";
    private int pageSize = 20;
    private int skip = 0;
    private long locksCount = 0;
    private int locksPageStart = 0;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Subscribe to the events
        sharedService.OnChange += StateHasChanged;

        currentUser = sharedService.CurrentUser;

        await RefreshLocks();

        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // Unsubscribe to the events
        sharedService.OnChange -= StateHasChanged;
    }

    private async void NextPage(MouseEventArgs e)
    {
        locksPageStart = locksPageStart + pageSize;
        skip = locksPageStart;
        await RefreshLocks();
    }

    private async void PreviousPage(MouseEventArgs e)
    {
        locksPageStart = locksPageStart - pageSize;
        skip = locksPageStart;
        await RefreshLocks();
    }

    private void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    private async void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed with result: {result}");
        await RefreshLocks();
    }

    private async System.Threading.Tasks.Task RefreshLocks()
    {
        working = true;
        locks.Clear();
        var result = await commitService.GetCommitsAsync(pageSize, skip, sortBy, sortDirection);
        locks = result.Item1;
        locksCount = result.Item2.GetValueOrDefault();
        working = false;
        StateHasChanged();
    }

    private void OpenLockDialog()
    {
        dialogService.Open<LockDialog>("Lock Punches",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private void OpenRangeDialog()
    {
        dialogService.Open<RangeDialog>("Change Date Range",
                                new Dictionary<string, object>() { },
                                new DialogOptions() { Width = "600px" });
    }

    private async void ChangeSortBy(string column)
    {
        sortBy = column;

        if (sortDirection == "ASC")
        {
            sortDirection = "DESC";
        }
        else
        {
            sortDirection = "ASC";
        }

        await RefreshLocks();
    }

    private async void Undo(int commitId)
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to undo this lock? All the punches will be editable again.",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        await commitService.PostUndoAsync(commitId);
        await RefreshLocks();
    }
}