@page "/user-details"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using NodaTime
@using NodaTime.TimeZones
@using Brizbee.Dashboard.Services
@using Brizbee.Dashboard.Models
@using Brizbee.Dashboard.Serialization

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@inject SharedService sharedService
@inject UserService userService
@inject OrganizationService organizationService
@inject DialogService dialogService
@inject IJSRuntime JSRuntime

@implements IDisposable

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <NavLink class="navbar-brand" href="kiosk/status">
                <img alt="BRIZBEE Logo" src="/icon-32x32.png">
            </NavLink>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <NavLink class="nav-link" href="kiosk/status">
                        <i class="far fa-id-badge fa-padded" aria-hidden="true"></i> Kiosk
                    </NavLink>
                </li>
                @if (currentUser.CanViewPunches || currentUser.CanViewTimecards || currentUser.CanViewRates || currentUser.CanViewLocks)
                {
                    <li>
                        <NavLink class="nav-link" href="punches">
                            <i class="far fa-clock fa-padded" aria-hidden="true"></i> Time
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewCustomers || currentUser.CanViewProjects || currentUser.CanViewTasks)
                {
                    <li>
                        <NavLink class="nav-link" href="customers">
                            <i class="fas fa-truck fa-padded" aria-hidden="true"></i> Projects and Customers
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewInventoryConsumptions || currentUser.CanViewInventoryItems)
                {
                    <li>
                        <NavLink class="nav-link" href="inventory/consumption">
                            <i class="fas fa-boxes fa-padded" aria-hidden="true"></i> Inventory
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewReports)
                {
                    <li>
                        <NavLink class="nav-link" href="reports">
                            <i class="fas fa-chart-line fa-padded" aria-hidden="true"></i> Reports
                        </NavLink>
                    </li>
                }
                @if (currentUser.CanViewUsers)
                {
                    <li>
                        <NavLink class="nav-link" href="users">
                            <i class="fas fa-users fa-padded" aria-hidden="true"></i> Users
                        </NavLink>
                    </li>
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="navbar-phone"><a href="tel:1-888-930-3044">Punch In or Out @@ 1-888-930-3044</a></li>
                <li class="dropdown">
                    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>
                            <NavLink class="nav-link" href="user-details">
                                Account Details
                            </NavLink>
                        </li>
                        @if (currentUser.CanViewOrganizationDetails)
                        {
                            <li role="separator" class="divider"></li>
                            <li>
                                <NavLink class="nav-link" href="organization-details">
                                    Organization Settings
                                </NavLink>
                            </li>
                        }
                        <li role="separator" class="divider"></li>
                        <li><a href="javascript:void(0)" @onclick="SignOutClicked">Sign Out</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container-fluid fadeIn">
    <div class="row">
        <div class="col-md-4 col-md-offset-4 col-sm-12">
            <div class="panel panel-default">
                <div class="panel-heading">User Details</div>
                <div class="panel-body">
                    <EditForm Model="@model" OnValidSubmit="SaveUser" class="form" autocomplete="off">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="user_email_address">Email Address</label>
                            <InputText id="user_email_address" @bind-Value="model.EmailAddress" type="email" class="form-control" readonly />
                        </div>

                        <div class="form-group">
                            <label for="user_name">Name</label>
                            <InputText id="user_name" @bind-Value="model.Name" class="form-control" disabled="@working" />
                        </div>

                        <hr />

                        <div class="form-group">
                            <label for="user_country_code">Country</label>
                            <InputSelect class="form-control" id="user_country_code" disabled="@working"
                                         ValueChanged="@( (string x) => selectedCountryCodeValueChangeHandler(x) )"
                                         ValueExpression="@( () => model.CountryCode )"
                                         Value="@model.CountryCode">
                                @foreach (var country in countries)
                                {
                                    <option value="@country.CountryCode">@country.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="user_time_zone">Default Time Zone</label>
                            <InputSelect class="form-control" id="user_time_zone" disabled="@working"
                                         ValueChanged="@( (string x) => selectedTimeZoneValueChangeHandler(x) )"
                                         ValueExpression="@( () => model.TimeZone )"
                                         Value="@model.TimeZone">
                                @foreach (var timeZone in countryZones)
                                {
                                    <option value="@timeZone.Id">@timeZone.Id</option>
                                }
                            </InputSelect>
                            <p class="help-block">Any future punches will be in this time zone if you do not specify otherwise.</p>
                        </div>

                        <hr />

                        @if (showPassword)
                        {
                            <div style="margin-top: 2em; margin-bottom: 2em;">
                                <div class="form-group">
                                    <label for="user_password">Password</label>
                                    <InputText type="password" id="user_password" @bind-Value="model.Password" class="form-control" disabled="@working" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div style="margin-top: 2em; margin-bottom: 2em;">
                                <a href="javascript:void(0)" @onclick="@(e => { showPassword = true; })">Change Password</a>
                            </div>
                        }

                        <hr />

                        <div class="form-group">
                            <label for="user_pin">PIN Number (for login via Pin)</label>
                            <InputText id="user_pin" @bind-Value="model.Pin" class="form-control" disabled="@working" />
                            <p class="help-block">This 4+ digit code is private and unique to each user. Users can login via Organization Code and User Pin on the Web, mobile apps, and hotline.</p>
                        </div>

                        <hr />

                        <button class="btn btn-primary" type="submit" disabled="@working">Save Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback SignOutClicked { get; set; }

    private bool working = false;
    private User currentUser;
    private bool showPassword = false;
    private List<Country> countries = new List<Country>();
    private List<IanaTimeZone> countryZones = new List<IanaTimeZone>();
    private List<IanaTimeZone> zones = new List<IanaTimeZone>();
    private UserModel model = new UserModel();

    protected override void OnInitialized()
    {
        // Subscribe to the events
        sharedService.OnChange += StateHasChanged;

        currentUser = sharedService.CurrentUser;

        // --------------------------------------------------------------------
        // Build list of time zones.
        // --------------------------------------------------------------------

        var now = SystemClock.Instance.GetCurrentInstant();
        var tzdb = DateTimeZoneProviders.Tzdb;
        var countryCode = "";

        var list =
            from location in TzdbDateTimeZoneSource.Default.ZoneLocations
            where string.IsNullOrEmpty(countryCode) ||
                  location.CountryCode.Equals(countryCode,
                    StringComparison.OrdinalIgnoreCase)
            let zoneId = location.ZoneId
            let tz = tzdb[zoneId]
            let offset = tz.GetZoneInterval(now).StandardOffset
            orderby offset, zoneId
            select new
            {
                Id = zoneId,
                CountryCode = location.CountryCode
            };

        foreach (var z in list)
        {
            zones.Add(new IanaTimeZone() { Id = z.Id, CountryCode = z.CountryCode });
        }


        // --------------------------------------------------------------------
        // Build list of countries.
        // --------------------------------------------------------------------

        CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);

        foreach (var culture in cultures)
        {
            try
            {
                var region = new RegionInfo(culture.LCID);
                if (!countries.Where(c => c.Name == region.EnglishName).Any())
                {
                    countries.Add(new Country() { CountryCode = region.TwoLetterISORegionName, Name = region.EnglishName });
                }
            }
            catch (CultureNotFoundException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        var defaultTimeZone = currentUser.TimeZone;
        var defaultCountryCode = zones.Where(z => z.Id == defaultTimeZone).Select(z => z.CountryCode).FirstOrDefault();

        selectedCountryCodeValueChangeHandler(defaultCountryCode);
        selectedTimeZoneValueChangeHandler(defaultTimeZone);

        model = new UserModel()
        {
            Name = currentUser.Name,
            EmailAddress = currentUser.EmailAddress,
            Pin = currentUser.Pin,
            TimeZone = currentUser.TimeZone,
            CountryCode = zones.Where(z => z.Id == currentUser.TimeZone).Select(z => z.CountryCode).FirstOrDefault()
        };
    }

    public void Dispose()
    {
        // Unsubscribe to the events
        sharedService.OnChange -= StateHasChanged;
    }

    private async System.Threading.Tasks.Task SaveUser()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to save the changes?",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        // Save the user on the server and close the dialog.
        if (showPassword)
            await userService.SaveUserDetailsAsync(currentUser.Id, model.TimeZone, model.EmailAddress, model.Name, model.Pin, model.Password);
        else
            await userService.SaveUserDetailsAsync(currentUser.Id, model.TimeZone, model.EmailAddress, model.Name, model.Pin);
    }

    private void selectedCountryCodeValueChangeHandler(string country)
    {
        model.CountryCode = country;
        countryZones = zones.Where(z => z.CountryCode == model.CountryCode).ToList();
    }

    private void selectedTimeZoneValueChangeHandler(string timeZone)
    {
        model.TimeZone = timeZone;
    }

    class UserModel
    {
        [Required]
        public string CountryCode { get; set; }

        [Required]
        public string TimeZone { get; set; }

        public string EmailAddress { get; set; }

        [Required]
        public string Name { get; set; }

        public string Pin { get; set; }

        public string Password { get; set; }
    }
}