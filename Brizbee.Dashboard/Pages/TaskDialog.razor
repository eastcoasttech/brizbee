@page "/dialogs/task"

@using Brizbee.Dashboard.Services
@using Brizbee.Common.Models

@inject DialogService dialogService
@inject TaskService taskService

<EditForm Model="@task" OnValidSubmit="SaveTask" class="form-horizontal" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="task_number" class="col-sm-3 control-label">Number</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="task_number" @bind-Value="task.Number" disabled="@(working || loading)" />
        </div>
    </div>

    <div class="form-group">
        <label for="task_name" class="col-sm-3 control-label">Name</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="task_name" @bind-Value="task.Name" disabled="@(working || loading)" />
        </div>
    </div>

    <hr />

    <button class="btn btn-primary" type="submit" disabled="@(working || loading)">OK</button>
    <button class="btn btn-default" type="button" @onclick="CloseDialog" disabled="@(working)">Cancel</button>
    <i class="@((working || loading) ? "fa fa-spinner fa-spin fa-fw" : "hidden")"></i>
    @if (task.Id != 0)
    {
        <button class="btn btn-danger pull-right" type="button" @onclick="DeleteTask" disabled="@(working || loading)">Delete</button>
    }
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    [Parameter] public int? ProjectId { get; set; }

    private bool working = false;
    private bool loading = true;
    private Brizbee.Common.Models.Task task = new Brizbee.Common.Models.Task();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // --------------------------------------------------------------------
        // Attempt to load the task, if necessary.
        // --------------------------------------------------------------------

        if (Id.HasValue)
        {
            task = await taskService.GetTaskByIdAsync(Id.Value);
        }
        else
        {
            task.Number = await taskService.GetNextNumberAsync();
        }

        loading = false;
    }

    private async System.Threading.Tasks.Task SaveTask()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to save this task?",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        // Set the project id.
        task.JobId = ProjectId.Value;

        // Save the task on the server and close the dialog.
        await taskService.SaveTaskAsync(task);
        dialogService.Close(false);
    }

    private async System.Threading.Tasks.Task DeleteTask()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm(
            "Are you sure you want to delete this task?",
            "Confirm",
            new ConfirmOptions() { Width = "600px", CancelButtonText = "Cancel", OkButtonText = "OK" });
        if (confirm != true)
            return;

        working = true;

        // Delete the task on the server and close the dialog.
        var result = await taskService.DeleteTaskAsync(task.Id);
        if (result)
            dialogService.Close(false);
        else
            working = false;
    }

    private void CloseDialog(MouseEventArgs e)
    {
        dialogService.Close(false);
    }
}
