@page "/"

@using Brizbee.Dashboard.Services
@using Brizbee.Dashboard.Serialization
@using Brizbee.Common.Security

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@inject SharedService sharedService
@inject UserService userService
@inject CommitService commitService
@inject PunchService punchService
@inject CustomerService customerService
@inject TaskService taskService
@inject TaskTemplateService taskTemplateService
@inject JobService jobService
@inject RateService rateService
@inject OrganizationService organizationService
@inject TimesheetEntryService timesheetEntryService
@inject QBDInventoryItemService qbdInventoryItemService
@inject QBDInventoryItemSyncService qbdInventoryItemSyncService
@inject QBDInventoryConsumptionService qbdInventoryConsumptionService
@inject QBDInventoryConsumptionSyncService qbdInventoryConsumptionSyncService
@inject ExportService exportService

@if (loading == true)
{
    <div class="spinner-background">
        <div class="spinner"></div>
    </div>
}

<div class="container-fluid fadeIn" style="min-height: 50vh;">
    @if (confirmed == true)
    {
        <div class="alert alert-info">Your account is now confirmed! Please sign in to continue.</div>
    }

    <div class="row">
        <div class="col-md-4 col-md-offset-4 col-xs-12">
            <div class="row" style="margin-top: 2em; margin-bottom: 2em;">
                <div class="col-md-8 col-md-offset-2 col-xs-12">
                    <p class="text-center" style="margin-bottom: 4em;">
                        <img src="/logo.png" alt="BRIZBEE Logo" style="width: 50%;" />
                    </p>

                    @if (method == "pin")
                    {
                        <div class="panel panel-default panel-login">
                            <div class="panel-heading">Login with Your PIN</div>
                            <div class="panel-body">
                                <EditForm Model="@pinSession" OnValidSubmit="AuthenticateAsync" autocomplete="off">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="form-group form-group-lg">
                                        <InputText @bind-Value="pinSession.OrganizationCode" class="form-control" placeholder="Organization Code" disabled="@(working ? true : false)" />
                                    </div>
                                    <div class="form-group form-group-lg">
                                        <InputText @bind-Value="pinSession.UserPin" class="form-control" placeholder="PIN Number" type="password" disabled="@(working ? true : false)" />
                                    </div>
                                    <button type="submit" class="btn btn-lg btn-primary" disabled="@(working ? true : false)">Login <i class="@((working == true) ? "fa fa-spinner fa-spin fa-fw" : "hidden")"></i></button>
                                </EditForm>
                            </div>
                        </div>
                        <p class="text-right"><a href="javascript:void(0)" @onclick="@(e => { method = "email"; })">Login with Email Address Instead</a></p>
                    }

                    @if (method == "email")
                    {
                        <div class="panel panel-default panel-login">
                            <div class="panel-heading">Login with Email Address</div>
                            <div class="panel-body">
                                <EditForm Model="@emailSession" OnValidSubmit="AuthenticateAsync" autocomplete="off">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="form-group form-group-lg">
                                        <InputText @bind-Value="emailSession.EmailAddress" class="form-control" type="email" placeholder="Email Address" disabled="@(working ? true : false)" />
                                    </div>
                                    <div class="form-group form-group-lg">
                                        <InputText @bind-Value="emailSession.EmailPassword" class="form-control" placeholder="Password" type="password" disabled="@(working ? true : false)" />
                                    </div>
                                    <button type="submit" class="btn btn-lg btn-primary" disabled="@(working ? true : false)">Login <i class="@((working == true) ? "fa fa-spinner fa-spin fa-fw" : "hidden")"></i></button>
                                    <a href="#!/reset" class="btn btn-lg btn-default" disabled="@(working ? true : false)">Reset Password</a>
                                </EditForm>
                            </div>
                        </div>
                        <p class="text-right"><a href="javascript:void(0)" @onclick="@(e => { method = "pin"; })">Login with PIN Number Instead</a></p>
                    }

                    <p class="text-center" style="margin-top: 4em;">
                        Don't have an account?
                    </p>
                    <p class="text-center">
                        <a href="#!/register" class="btn btn-lg btn-block btn-primary hidden-xs hidden-sm" style="padding-left: 2em; padding-right: 2em;">Start Tracking Time for FREE <i class="fa fa-arrow-circle-o-right" aria-hidden="true"></i></a>
                        <a href="#!/register" class="btn btn-sm btn-block btn-primary visible-xs visible-sm" style="padding-left: 2em; padding-right: 2em;">Start Tracking Time for FREE <i class="fa fa-arrow-circle-o-right" aria-hidden="true"></i></a>
                    </p>
                    <p class="text-center text-muted">
                        No Credit Card Required. Cancel Anytime.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool loading = true;
    private bool working = false;
    private bool confirmed = false;
    private string method = "pin";
    private PinSession pinSession = new PinSession();
    private EmailSession emailSession = new EmailSession();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Get credentials from local storage.
        var credential = new Credential()
        {
            AuthExpiration = await localStorageService.GetFromLocalStorage("AuthExpiration"),
            AuthUserId = await localStorageService.GetFromLocalStorage("AuthUserId"),
            AuthToken = await localStorageService.GetFromLocalStorage("AuthToken")
        };

        if (!string.IsNullOrEmpty(credential.AuthUserId) &&
            !string.IsNullOrEmpty(credential.AuthExpiration) &&
            !string.IsNullOrEmpty(credential.AuthToken))
        {
            // Update headers on services.
            userService.ConfigureHeadersWithCredentials(credential);
            punchService.ConfigureHeadersWithCredentials(credential);
            commitService.ConfigureHeadersWithCredentials(credential);
            customerService.ConfigureHeadersWithCredentials(credential);
            taskService.ConfigureHeadersWithCredentials(credential);
            taskTemplateService.ConfigureHeadersWithCredentials(credential);
            jobService.ConfigureHeadersWithCredentials(credential);
            rateService.ConfigureHeadersWithCredentials(credential);
            organizationService.ConfigureHeadersWithCredentials(credential);
            timesheetEntryService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryItemService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryItemSyncService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryConsumptionService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryConsumptionSyncService.ConfigureHeadersWithCredentials(credential);
            exportService.ConfigureHeadersWithCredentials(credential);

            // Configure shared service.
            sharedService.CurrentUser = await userService.GetUserMeAsync(int.Parse(credential.AuthUserId));
            sharedService.AuthUserId = int.Parse(credential.AuthUserId);
            sharedService.AuthToken = credential.AuthToken;
            sharedService.AuthExpiration = credential.AuthExpiration;

            NavigationManager.NavigateTo("kiosk/status");
        }
        else
        {
            loading = false;
        }
    }

    private async System.Threading.Tasks.Task AuthenticateAsync()
    {
        working = true;

        try
        {
            Credential credential;

            if (method == "pin")
            {
                credential = await userService.AuthenticateWithPinAsync(pinSession);
            }
            else if (method == "email")
            {
                credential = await userService.AuthenticateWithEmailAsync(emailSession);
            }
            else
            {
                return;
            }

            // Save credential to local storage
            await localStorageService.SetLocalStorage("AuthUserId", credential.AuthUserId);
            await localStorageService.SetLocalStorage("AuthToken", credential.AuthToken);
            await localStorageService.SetLocalStorage("AuthExpiration", credential.AuthExpiration);

            // Update headers on services
            userService.ConfigureHeadersWithCredentials(credential);
            punchService.ConfigureHeadersWithCredentials(credential);
            commitService.ConfigureHeadersWithCredentials(credential);
            customerService.ConfigureHeadersWithCredentials(credential);
            taskService.ConfigureHeadersWithCredentials(credential);
            taskTemplateService.ConfigureHeadersWithCredentials(credential);
            jobService.ConfigureHeadersWithCredentials(credential);
            rateService.ConfigureHeadersWithCredentials(credential);
            organizationService.ConfigureHeadersWithCredentials(credential);
            timesheetEntryService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryItemService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryItemSyncService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryConsumptionService.ConfigureHeadersWithCredentials(credential);
            qbdInventoryConsumptionSyncService.ConfigureHeadersWithCredentials(credential);
            exportService.ConfigureHeadersWithCredentials(credential);

            // Configure shared service
            sharedService.CurrentUser = await userService.GetUserMeAsync(int.Parse(credential.AuthUserId));

            NavigationManager.NavigateTo("kiosk/status");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            working = false;
        }
    }
} 