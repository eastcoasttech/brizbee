@page "/dialogs/punch"

@using Brizbee.Dashboard.Services
@using Brizbee.Common.Models
@using Brizbee.Common.Serialization
@using NodaTime
@using NodaTime.TimeZones

@inject DialogService dialogService
@inject UserService userService
@inject CustomerService customerService
@inject JobService jobService
@inject TaskService taskService
@inject PunchService punchService

<EditForm Model="@punch" OnValidSubmit="SavePunch" class="form-horizontal" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="selected_user_name" class="col-sm-3 control-label">User</label>
        <div class="col-sm-9">
            <InputSelect class="form-control" id="selected_user_name" disabled="@(loading || loadingUsers || working)" autofocus
                         ValueChanged="@( (int x) => SelectedUserValueChangeHandler(x) )"
                         ValueExpression="@( () => selectedUserId )"
                         Value="@selectedUserId">
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="selected_customer_name" class="col-sm-3 control-label">Customer</label>
        <div class="col-sm-9">
            <InputSelect class="form-control" id="selected_customer_name" disabled="@(loading || loadingCustomers || working)"
                         ValueChanged="@( (int c) => SelectedCustomerValueChangeHandler(c) )"
                         ValueExpression="@( () => selectedCustomerId )"
                         Value="@selectedCustomerId">
                @foreach (var customer in customers)
                {
                    <option value="@customer.Id">@customer.Number &ndash; @customer.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="selected_job_name" class="col-sm-3 control-label">Job</label>
        <div class="col-sm-9">
            <InputSelect class="form-control" id="selected_job_name" disabled="@(loading || loadingCustomers || loadingJobs || working)"
                         ValueChanged="@( (int c) => SelectedJobValueChangeHandler(c) )"
                         ValueExpression="@( () => selectedJobId )"
                         Value="@selectedJobId">
                @foreach (var job in jobs)
                {
                    <option value="@job.Id">@job.Number &ndash; @job.Name </option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="selected_task_name" class="col-sm-3 control-label">Task</label>
        <div class="col-sm-9">
            <InputSelect class="form-control" id="selected_task_name" disabled="@(loading || loadingCustomers || loadingJobs || loadingTasks || working)"
                         ValueChanged="@( (int c) => SelectedTaskValueChangeHandler(c) )"
                         ValueExpression="@( () => selectedTaskId )"
                         Value="@selectedTaskId">
                @foreach (var task in tasks)
                {
                    <option value="@task.Id">@task.Number &ndash; @task.Name </option>
                }
            </InputSelect>
        </div>
    </div>

    <hr />

    <div class="form-group">
        <label for="in_at" class="col-sm-3 control-label">In</label>
        <div class="col-sm-9">
            <div class="row" style="margin-right: 0;">
                <div class="col-md-6" style="padding-right: 0;">
                    <InputDate @bind-Value="punch.InAt" class="form-control" disabled="@(loading || working)" />
                </div>
                <div class="col-md-2" style="padding-right: 0;">
                    <InputSelect @bind-Value="inAtHour" class="form-control" disabled="@(loading || working)">
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2" style="padding-right: 0;">
                    <InputSelect @bind-Value="inAtMinute" class="form-control" disabled="@(loading || working)">
                        @for (int i = 0; i <= 59; i++)
                        {
                            <option value="@i.ToString("D2")">@i.ToString("D2")</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-default" @onclick="ToggleInAtMerdian" disabled="@(loading || working)">@inAtMeridian</button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="in_at_time_zone" class="col-sm-3 control-label">Time Zone</label>
        <div class="col-sm-9">
            <InputSelect @bind-Value="punch.InAtTimeZone" class="form-control" id="in_at_time_zone" disabled="@(loading || working)">
                @foreach (var timeZone in zones)
                {
                    <option value="@timeZone.Id">@timeZone.Id</option>
                }
            </InputSelect>
        </div>
    </div>

    <hr />

    <div class="form-group">
        <div class="col-sm-offset-3 col-sm-9">
            <div class="checkbox">
                <label>
                    <InputCheckbox @bind-Value="hasPunchOut" disabled="@(loading || working)" /> Has Punch Out?
                </label>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="out_at" class="col-sm-3 control-label">Out</label>
        <div class="col-sm-9">
            <div class="row" style="margin-right: 0;">
                <div class="col-md-6" style="padding-right: 0;">
                    <InputDate @bind-Value="punch.OutAt" class="form-control" disabled="@(!hasPunchOut || loading || working)" />
                </div>
                <div class="col-md-2" style="padding-right: 0;">
                    <InputSelect @bind-Value="outAtHour" class="form-control" disabled="@(!hasPunchOut || loading || working)">
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2" style="padding-right: 0;">
                    <InputSelect @bind-Value="outAtMinute" class="form-control" disabled="@(!hasPunchOut || loading || working)">
                        @for (int i = 0; i <= 59; i++)
                        {
                            <option value="@i.ToString("D2")">@i.ToString("D2")</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-default" @onclick="ToggleOutAtMerdian" disabled="@(!hasPunchOut || loading || working)">@outAtMeridian</button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="out_at_time_zone" class="col-sm-3 control-label">Time Zone</label>
        <div class="col-sm-9">
            <InputSelect @bind-Value="punch.OutAtTimeZone" class="form-control" id="out_at_time_zone" disabled="@(!hasPunchOut || loading || working)">
                @foreach (var timeZone in zones)
                {
                    <option value="@timeZone.Id">@timeZone.Id</option>
                }
            </InputSelect>
        </div>
    </div>

    @if (punch.CommitId.HasValue)
    {
        <p class="text-danger">
        </p>
    }

    <hr />

    <button class="btn btn-primary" type="submit" disabled="@(loading || working)">OK</button>
    <button class="btn btn-default" type="button" @onclick="CloseDialog" disabled="@(working)">Cancel</button>
    @if (punch.Id != 0)
    {
        <button class="btn btn-danger pull-right" type="button" @onclick="DeletePunch" disabled="@(loading || working)">Delete</button>
    }
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }

    private bool working = false;
    private bool loading = true;
    private bool loadingUsers = true;
    private bool loadingCustomers = true;
    private bool loadingJobs = true;
    private bool loadingTasks = true;
    private List<IanaTimeZone> zones = new List<IanaTimeZone>();
    private Punch punch = new Punch();
    private int selectedUserId;
    private int selectedCustomerId;
    private int selectedJobId;
    private int selectedTaskId;
    private string inAtHour = "9";
    private string inAtMinute = "00";
    private string inAtMeridian = "AM";
    private string outAtHour = "5";
    private string outAtMinute = "00";
    private string outAtMeridian = "PM";
    private List<string> minutes = new List<string>();
    private bool hasPunchOut = false;
    private List<Customer> customers = new List<Customer>();
    private List<Brizbee.Common.Models.Task> tasks = new List<Brizbee.Common.Models.Task>();
    private List<Job> jobs = new List<Job>();
    private List<User> users = new List<User>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // --------------------------------------------------------------------
        // Build list of time zones.
        // --------------------------------------------------------------------

        var now = SystemClock.Instance.GetCurrentInstant();
        var tzdb = DateTimeZoneProviders.Tzdb;
        var countryCode = "";

        var list =
            from location in TzdbDateTimeZoneSource.Default.ZoneLocations
            where string.IsNullOrEmpty(countryCode) ||
                  location.CountryCode.Equals(countryCode,
                    StringComparison.OrdinalIgnoreCase)
            let zoneId = location.ZoneId
            let tz = tzdb[zoneId]
            let offset = tz.GetZoneInterval(now).StandardOffset
            orderby offset, zoneId
            select new
            {
                Id = zoneId,
                CountryCode = location.CountryCode
            };

        foreach (var z in list)
        {
            zones.Add(new IanaTimeZone() { Id = z.Id, CountryCode = z.CountryCode });
        }


        // --------------------------------------------------------------------
        // Set defaults.
        // --------------------------------------------------------------------

        punch = new Punch()
        {
            InAt = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0),
            OutAt = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 17, 0, 0),
            InAtTimeZone = zones.First().Id,
            OutAtTimeZone = zones.First().Id
        };


        // --------------------------------------------------------------------
        // Load the drop downs.
        // --------------------------------------------------------------------

        await RefreshUsers();


        // --------------------------------------------------------------------
        // Attempt to load the punch, if necessary.
        // --------------------------------------------------------------------

        if (Id.HasValue)
        {
            punch = await punchService.GetPunchByIdAsync(Id.Value);

            if (punch.InAt.ToString("hh").Contains("0") && punch.InAt.ToString("hh").IndexOf("0") == 0)
                inAtHour = punch.InAt.ToString("hh").Replace("0", "");
            else
                inAtHour = punch.InAt.ToString("hh");
            inAtMinute = punch.InAt.ToString("mm");
            inAtMeridian = punch.InAt.ToString("tt").ToUpper();

            if (punch.OutAt.HasValue)
            {
                // Allow editing the punch out.
                hasPunchOut = true;

                if (punch.OutAt.Value.ToString("hh").Contains("0") && punch.OutAt.Value.ToString("hh").IndexOf("0") == 0)
                    outAtHour = punch.OutAt.Value.ToString("hh").Replace("0", "");
                else
                    outAtHour = punch.OutAt.Value.ToString("hh");
                outAtMinute = punch.OutAt.Value.ToString("mm");
                outAtMeridian = punch.OutAt.Value.ToString("tt").ToUpper();
            }
            else
            {
                // Set a default value.
                punch.OutAt = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 17, 0, 0);
                punch.OutAtTimeZone = zones.First().Id;
            }

            // Set the customer, job, and task based on the TaskId for this punch.
            await RefreshCustomers(punch.Task.Job.CustomerId);
            await RefreshJobs(punch.Task.JobId);
            await RefreshTasks(punch.TaskId);
        }
        else
        {
            // Set the customer, job, and task by selecting defaults.
            await RefreshCustomers();
        }

        loading = false;
    }

    private async void SelectedCustomerValueChangeHandler(int customerId)
    {
        selectedCustomerId = customerId;
        await RefreshJobs();
    }

    private async void SelectedJobValueChangeHandler(int jobId)
    {
        selectedJobId = jobId;
        await RefreshTasks();
    }

    private void SelectedTaskValueChangeHandler(int taskId)
    {
        selectedTaskId = taskId;

        // Update the punch.
        punch.TaskId = selectedTaskId;
    }

    private void SelectedUserValueChangeHandler(int userId)
    {
        selectedUserId = userId;

        // Update the punch.
        punch.UserId = selectedUserId;
    }

    private async System.Threading.Tasks.Task RefreshUsers()
    {
        loadingUsers = true;

        users = await userService.GetUsersAsync();
        selectedUserId = users.FirstOrDefault().Id;

        // Update the punch.
        punch.UserId = selectedUserId;

        loadingUsers = false;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task RefreshCustomers(int? customerId = null)
    {
        loadingCustomers = true;

        customers = await customerService.GetCustomersAsync();

        if (customerId.HasValue)
        {
            // Attempt to find the requested customer in the list.
            var exists = customers.Where(c => c.Id == customerId).Any();
            if (exists)
                selectedCustomerId = customerId.Value;
        }
        else
        {
            // Set the default value.
            selectedCustomerId = customers.FirstOrDefault().Id;

            // Trigger refresh for jobs.
            await RefreshJobs();
        }

        loadingCustomers = false;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task RefreshJobs(int? jobId = null)
    {
        loadingJobs = true;

        jobs = await jobService.GetJobsAsync(selectedCustomerId);

        if (jobId.HasValue)
        {
            // Attempt to find the requested job in the list.
            var exists = jobs.Where(j => j.Id == jobId).Any();
            if (exists)
                selectedJobId = jobId.Value;
        }
        else
        {
            // Set the default value.
            selectedJobId = jobs.FirstOrDefault().Id;

            // Trigger refresh for tasks.
            await RefreshTasks();
        }

        loadingJobs = false;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task RefreshTasks(int? taskId = null)
    {
        loadingTasks = true;

        tasks = await taskService.GetTasksAsync(selectedJobId);

        if (taskId.HasValue)
        {
            // Attempt to find the requested job in the list.
            var exists = tasks.Where(t => t.Id == taskId).Any();
            if (exists)
                selectedTaskId = taskId.Value;
        }
        else
        {
            // Set the default value.
            selectedTaskId = tasks.FirstOrDefault().Id;

            // Update the punch.
            punch.TaskId = selectedTaskId;
        }

        loadingTasks = false;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task SavePunch()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm("Are you sure you want to save this punch?");
        if (confirm != true)
            return;

        // Parse the new hour and minute.
        punch.InAt = DateTime.Parse($"{punch.InAt.Year}-{punch.InAt.Month}-{punch.InAt.Day} {inAtHour}:{inAtMinute} {inAtMeridian}");

        // Optionally parse the new hour and minute.
        if (hasPunchOut)
            punch.OutAt = DateTime.Parse($"{punch.OutAt.Value.Year}-{punch.OutAt.Value.Month}-{punch.OutAt.Value.Day} {outAtHour}:{outAtMinute} {outAtMeridian}");
        else
        {
            punch.OutAt = null;
            punch.OutAtTimeZone = null;
        }

        // Save the punch on the server and close the dialog.
        await punchService.SavePunch(punch);
        dialogService.Close(false);
    }

    private void ToggleInAtMerdian()
    {
        inAtMeridian = inAtMeridian == "AM" ? "PM" : "AM";
    }

    private void ToggleOutAtMerdian()
    {
        outAtMeridian = outAtMeridian == "AM" ? "PM" : "AM";
    }

    private async System.Threading.Tasks.Task DeletePunch()
    {
        // Confirm that the user wants to make the change.
        var confirm = await dialogService.Confirm("Are you sure you want to delete this punch?");
        if (confirm != true)
            return;

        // Delete the punch on the server and close the dialog.
        await punchService.DeletePunch(punch.Id);
        dialogService.Close(false);
    }

    private void CloseDialog(MouseEventArgs e)
    {
        dialogService.Close(false);
    }
}