@page "/dialogs/filters/punch"

@using Brizbee.Dashboard.Services
@using Brizbee.Dashboard.Serialization

@inject DialogService dialogService
@inject SharedService sharedService

<EditForm Model="@filter" OnValidSubmit="SaveFilter" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-4" style="padding-right: 10px;">
            <InputSelect @bind-Value="filter.Type" id="range_max" class="form-control">
                <option>User</option>
                <option>Customer</option>
                <option>Project</option>
                <option>Task</option>
            </InputSelect>
        </div>
        <div class="col-md-6" style="padding-left: 0; padding-right: 10px;">
            @*<RadzenAutoComplete Data=@customCustomersData TextProperty="CompanyName" Placeholder="Search"
                                LoadData=@OnLoadData class="form-control"
                                Change=@(args => OnChange(args, "AutoComplete with custom filtering")) />*@
        </div>
        <div class="col-md-2" style="padding-left: 0;">
            <button class="btn btn-primary btn-block" type="submit" style="margin-left: 2px;">Add</button>
        </div>
    </div>
</EditForm>

<hr />

<table class="table">
    <thead>
        <tr>
            <th class="col-md-3">Type</th>
            <th class="col-md-8">Filter</th>
            <th class="col-md-1"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in filters.Users)
        {
            <tr>
                <td>User</td>
                <td>@user.Name</td>
                <td><a href="" @onclick:preventDefault><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var task in filters.Tasks)
        {
            <tr>
                <td>Task</td>
                <td>@task.Name</td>
                <td><a href="" @onclick:preventDefault><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var project in filters.Projects)
        {
            <tr>
                <td>Project</td>
                <td>@project.Name</td>
                <td><a href="" @onclick:preventDefault><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var customer in filters.Customers)
        {
            <tr>
                <td>Customer</td>
                <td>@customer.Name</td>
                <td><a href="" @onclick:preventDefault><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }
    </tbody>
</table>

<hr />

<button class="btn btn-default pull-right" type="button" @onclick="CloseDialog" style="margin-left: 2px;">Cancel</button>
<button class="btn btn-primary pull-right" type="submit" style="margin-left: 2px;">OK</button>

@code {
    PunchFilters filters = new PunchFilters();
    Filter filter = new Filter() { Type = "User" };

    protected override void OnInitialized()
    {
        filters = sharedService.PunchFilters;
    }

    private void CloseDialog(MouseEventArgs e)
    {
        dialogService.Close(false);
    }

    private void SaveFilter()
    {
        //switch (filter.Type)
        //{
        //    case "User":
        //        sharedService.PunchFilters.Users.Add(0);
        //        break;
        //    case "Task":
        //        sharedService.PunchFilters.Tasks.Add(0);
        //        break;
        //    case "Project":
        //        sharedService.PunchFilters.Projects.Add(0);
        //        break;
        //    case "Customer":
        //        sharedService.PunchFilters.Customers.Add(0);
        //        break;
        //}
        //filter = new Filter() { Type = "User" };
    }

    private void OnChange(object value, string name)
    {

    }

    //private void OnLoadData(LoadDataArgs args)
    //{
    //    customCustomersData = dbContext.Customers.Where(c => c.CustomerID.Contains(args.Filter) || c.ContactName.Contains(args.Filter)).ToList();

    //    InvokeAsync(StateHasChanged);
    //}

    class Filter
    {
        public string Type { get; set; }

        public string Id { get; set; }
    }
}
