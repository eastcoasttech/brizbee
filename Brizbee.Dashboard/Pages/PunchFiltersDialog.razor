@page "/dialogs/filters/punch"

@using Brizbee.Dashboard.Services
@using Brizbee.Dashboard.Serialization
@using Brizbee.Common.Models

@inject DialogService dialogService
@inject SharedService sharedService
@inject UserService userService

<div class="btn-toolbar" role="toolbar">
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-sm btn-default" @onclick="@(e => OpenSearchUsersDialog())"><i class="fas fa-users fa-padded" aria-hidden="true"></i> Users</button>
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-sm btn-default" @onclick="@(e => OpenSearchCustomersDialog())"><i class="fas fa-user-tie fa-padded" aria-hidden="true"></i> Customers</button>
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-sm btn-default" @onclick="@(e => OpenSearchProjectsDialog())"><i class="fa fa-truck fa-padded" aria-hidden="true"></i> Projects</button>
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-sm btn-default" @onclick="@(e => OpenSearchTasksDialog())"><i class="fas fa-project-diagram fa-padded" aria-hidden="true"></i> Tasks</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th class="col-md-3">Type</th>
            <th class="col-md-8">Filter</th>
            <th class="col-md-1"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in filters.Users)
        {
            <tr>
                <td>User</td>
                <td>@user.Name</td>
                <td><a href="javascript:void(0)" @onclick="@(e => filters.Users.Remove(user))"><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var task in filters.Tasks)
        {
            <tr>
                <td>Task</td>
                <td>@task.Name</td>
                <td><a href="javascript:void(0)" @onclick="@(e => filters.Tasks.Remove(task))"><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var project in filters.Projects)
        {
            <tr>
                <td>Project</td>
                <td>@project.Name</td>
                <td><a href="javascript:void(0)" @onclick="@(e => filters.Projects.Remove(project))"><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }

        @foreach (var customer in filters.Customers)
        {
            <tr>
                <td>Customer</td>
                <td>@customer.Name</td>
                <td><a href="javascript:void(0)" @onclick="@(e => filters.Customers.Remove(customer))"><i class="fas fa-trash-alt"></i></a></td>
            </tr>
        }
    </tbody>
</table>

<hr />

<button class="btn btn-default pull-right" type="button" @onclick="CloseDialog" style="margin-left: 2px;">Cancel</button>
<button class="btn btn-primary pull-right" type="submit" style="margin-left: 2px;">OK</button>

@code {
    private PunchFilters filters = new PunchFilters();

    protected override void OnInitialized()
    {
        filters = sharedService.PunchFilters;

        dialogService.OnClose += Close;
    }

    private void Close(dynamic result)
    {
        if (result is HashSet<User>)
        {
            Console.WriteLine("Result is a hashset of users");
            filters.Users = result as HashSet<User>;
            StateHasChanged();
        } else if (result is HashSet<Customer>)
        {
            Console.WriteLine("Result is a hashset of customers");
            filters.Customers = result as HashSet<Customer>;
            StateHasChanged();
        }
    }

    private void CloseDialog(MouseEventArgs e)
    {
        dialogService.Close(false);
    }

    private void OpenSearchUsersDialog()
    {
        dialogService.Open<SearchUsersDialog>("Search Users",
                                new Dictionary<string, object>() { { "ExistingFilters", filters.Users } },
                                new DialogOptions() { Width = "400px" });
    }

    private void OpenSearchTasksDialog()
    {
        dialogService.Open<SearchUsersDialog>("Search Tasks",
                                new Dictionary<string, object>() { { "ExistingFilters", filters.Tasks } },
                                new DialogOptions() { Width = "400px" });
    }

    private void OpenSearchProjectsDialog()
    {
        dialogService.Open<SearchUsersDialog>("Search Projects",
                                new Dictionary<string, object>() { { "ExistingFilters", filters.Projects } },
                                new DialogOptions() { Width = "400px" });
    }

    private void OpenSearchCustomersDialog()
    {
        dialogService.Open<SearchCustomersDialog>("Search Customers",
                                new Dictionary<string, object>() { { "ExistingFilters", filters.Customers } },
                                new DialogOptions() { Width = "400px" });
    }
}
