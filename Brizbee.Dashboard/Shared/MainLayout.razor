@inherits LayoutComponentBase

@using Brizbee.Dashboard.Services

@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService

@inject SharedService sharedService
@inject AuditService auditService
@inject AuthService authService
@inject KioskService kioskService
@inject UserService userService
@inject PunchService punchService
@inject RateService rateService
@inject OrganizationService organizationService
@inject ExportService exportService
@inject TaskService taskService
@inject JobService jobService
@inject CustomerService customerService
@inject LockService lockService
@inject TimesheetEntryService timesheetEntryService
@inject QBDInventoryItemService qbdInventoryItemService
@inject QBDInventoryItemSyncService qbdInventoryItemSyncService
@inject QBDInventoryConsumptionService qbdInventoryConsumptionService
@inject QBDInventoryConsumptionSyncService qbdInventoryConsumptionSyncService
@inject TaskTemplateService taskTemplateService
@inject PopulateTemplateService populateTemplateService

<RadzenDialog />
<RadzenTooltip />

<div id="wrap">
    <div id="main">
        <CascadingValue Value=SignOutClicked>
            @Body
        </CascadingValue>
    </div>
</div>

@code {
    EventCallback _signOutClicked = EventCallback.Empty;
    EventCallback SignOutClicked
    {
        get
        {
            if (_signOutClicked.Equals(EventCallback.Empty))
                _signOutClicked = EventCallback.Factory.Create(this, SignOutAsync);
            return _signOutClicked;
        }
    }
    
    protected override async void OnInitialized()
    {
        var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        // Handle authentication
        if (sharedService.CurrentUser == null)
        {
            var token = await localStorageService.GetFromLocalStorage("Token");

            // Check for previous authentication
            if (!string.IsNullOrEmpty(token))
            {
                // Update headers on services.
                auditService.ConfigureHeadersWithToken(token);
                authService.ConfigureHeadersWithToken(token);
                kioskService.ConfigureHeadersWithToken(token);
                userService.ConfigureHeadersWithToken(token);
                punchService.ConfigureHeadersWithToken(token);
                lockService.ConfigureHeadersWithToken(token);
                customerService.ConfigureHeadersWithToken(token);
                taskService.ConfigureHeadersWithToken(token);
                taskTemplateService.ConfigureHeadersWithToken(token);
                populateTemplateService.ConfigureHeadersWithToken(token);
                jobService.ConfigureHeadersWithToken(token);
                rateService.ConfigureHeadersWithToken(token);
                organizationService.ConfigureHeadersWithToken(token);
                timesheetEntryService.ConfigureHeadersWithToken(token);
                qbdInventoryItemService.ConfigureHeadersWithToken(token);
                qbdInventoryItemSyncService.ConfigureHeadersWithToken(token);
                qbdInventoryConsumptionService.ConfigureHeadersWithToken(token);
                qbdInventoryConsumptionSyncService.ConfigureHeadersWithToken(token);
                exportService.ConfigureHeadersWithToken(token);
                
                // Configure shared service.
                sharedService.CurrentUser = await authService.GetMeAsync();
                sharedService.Token = token;
            }
            else
            {
                // Otherwise, redirect to login
                NavigationManager.NavigateTo("/");
                return;
            }
        }
    }

    private async void SignOutAsync()
    {
        // Clear the local storage
        await localStorageService.RemoveFromLocalStorage("Token");

        // Clear the headers
        auditService.ResetHeaders();
        kioskService.ResetHeaders();
        userService.ResetHeaders();
        punchService.ResetHeaders();
        rateService.ResetHeaders();
        organizationService.ResetHeaders();
        exportService.ResetHeaders();
        taskService.ResetHeaders();
        jobService.ResetHeaders();
        customerService.ResetHeaders();
        lockService.ResetHeaders();
        timesheetEntryService.ResetHeaders();
        qbdInventoryItemService.ResetHeaders();
        qbdInventoryItemSyncService.ResetHeaders();
        qbdInventoryConsumptionService.ResetHeaders();
        qbdInventoryConsumptionSyncService.ResetHeaders();
        taskTemplateService.ResetHeaders();
        populateTemplateService.ResetHeaders();

        // Reset shared variables
        sharedService.Reset();

        // Return to login
        NavigationManager.NavigateTo("/");
    }
}
